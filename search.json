[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 azlogr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vivek Atal. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Atal V (2023). azlogr: Logging 'R' Post 'Azure Log Analytics' Workspace. https://atalv.github.io/azlogr/ https://github.com/atalv/azlogr/.","code":"@Manual{,   title = {azlogr: Logging in 'R' and Post to 'Azure Log Analytics' Workspace},   author = {Vivek Atal},   year = {2023},   note = {https://atalv.github.io/azlogr/ https://github.com/atalv/azlogr/}, }"},{"path":"/index.html","id":"azlogr","dir":"","previous_headings":"","what":"Logging in R and Post to Azure Log Analytics Workspace","title":"Logging in R and Post to Azure Log Analytics Workspace","text":"goal azlogr enable logging ‘R’ easily send logging messages ‘Azure Log Analytics’ workspace real-time. also shows logging message ‘R’ console, makes easier see logs pace R codes executed. easier somebody retrieve historical logs ‘Azure Log Analytics’, needed, compare. extension 'logger' package, see article: vignette(\"Intro\", package = \"logger\") introduction package. may set logging threshold using logger::log_threshold() function 'logger' package initiating session. Moreover, option provided add additional custom meta-data logging, can helpful times.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Logging in R and Post to Azure Log Analytics Workspace","text":"can install latest development version azlogr GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"atalv/azlogr\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Logging in R and Post to Azure Log Analytics Workspace","text":"shown simple way use logging mechanism. Please refer vignette article package, vignette(\"--use-azlogr\"), know configure ‘Azure Log Analytics’ workspace credentials use package easily.","code":"library(azlogr) set_log_config(log_to_azure = FALSE) logger_info(\"logging info\") #> {\"level\":\"INFO\",\"time\":\"2023-01-11 13:15:06\",\"msg\":\"logging info\"}"},{"path":"/reference/dot-add_meta_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Add additional meta variable — .add_meta_variables","title":"Add additional meta variable — .add_meta_variables","text":"Add additional meta variables logging context top ones readily collected get_logger_meta_variables function. might needed add metadata specific logging usage - goal served function.","code":""},{"path":"/reference/dot-add_meta_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add additional meta variable — .add_meta_variables","text":"","code":".add_meta_variables(   additional_fields = NULL,   log_level = NULL,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"/reference/dot-add_meta_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add additional meta variable — .add_meta_variables","text":"additional_fields named vector type list key-value pairs additional meta data needs added logging context top log_fields. respective value key expected length 1. NULL default. log_level log level per log_levels namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"/reference/dot-add_meta_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add additional meta variable — .add_meta_variables","text":"Returns vector collected meta-data. used defining log_layout function.","code":""},{"path":"/reference/dot-build_signature.html","id":null,"dir":"Reference","previous_headings":"","what":"Build API signature for logging to 'Azure Log Analytics' — .build_signature","title":"Build API signature for logging to 'Azure Log Analytics' — .build_signature","text":"'Azure Log Analytics' HTTP REST API documentation 'Python' followed create 'R' version . 'Python' version function described https://learn.microsoft.com/en-us/azure/azure-monitor/logs/data-collector-api?tabs=python#sample-requests/","code":""},{"path":"/reference/dot-build_signature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build API signature for logging to 'Azure Log Analytics' — .build_signature","text":"","code":".build_signature(   customer_id,   shared_key,   date,   content_length,   method,   content_type,   resource )"},{"path":"/reference/dot-build_signature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build API signature for logging to 'Azure Log Analytics' — .build_signature","text":"customer_id customer_id 'Azure Log Analytics' workspace shared_key shared_key 'Azure Log Analytics' workspace date date-time logging event content_length Content length body method one value expected - POST content_type one value expected - application/json resource one value expected - /api/logs","code":""},{"path":"/reference/dot-build_signature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build API signature for logging to 'Azure Log Analytics' — .build_signature","text":"Returns part header HTTP POST request sent 'Azure Log Analytics' workspace","code":""},{"path":"/reference/dot-layout_json_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Customized logging layout — .layout_json_custom","title":"Customized logging layout — .layout_json_custom","text":"extended function layout_json function 'logger' package. Objective add additional component logging layout JSON format can also reported logging along components collected .add_meta_variables.","code":""},{"path":"/reference/dot-layout_json_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customized logging layout — .layout_json_custom","text":"","code":".layout_json_custom(   log_fields = c(\"time\", \"level\", \"ns\", \"ans\", \"topenv\", \"fn\", \"node\", \"arch\", \"os_name\",     \"os_release\", \"os_version\", \"pid\", \"user\", \"msg\"),   additional_fields = NULL,   enforce_ascii_msg = TRUE,   enforce_tz_utc = TRUE )"},{"path":"/reference/dot-layout_json_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customized logging layout — .layout_json_custom","text":"log_fields Vector components collected get_logger_meta_variables function. Converting time component UTC additionally. additional_fields named vector type list key-value pairs additional meta data needs added logging context top log_fields. respective value key expected length 1. NULL default. enforce_ascii_msg TRUE (default), logging message guaranteed non-ASCII characters escaped. FALSE, characters logged -. Please note, better ensure ASCII, otherwise might error sending HTTP POST request 'Azure Log Analytics' workspace. enforce_tz_utc TRUE (default), logging time field converted UTC timezone sending logging dump 'Azure Log Analytics' workspace. FALSE, local time captured Sys.time recorded time field.","code":""},{"path":"/reference/dot-layout_json_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Customized logging layout — .layout_json_custom","text":"Returns generator function typically used log_layout function.","code":""},{"path":"/reference/dot-post_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Build and send a request to the POST API of 'Azure Log Analytics' — .post_data","title":"Build and send a request to the POST API of 'Azure Log Analytics' — .post_data","text":"Build send request POST API 'Azure Log Analytics'","code":""},{"path":"/reference/dot-post_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build and send a request to the POST API of 'Azure Log Analytics' — .post_data","text":"","code":".post_data(customer_id, shared_key, body, log_type)"},{"path":"/reference/dot-post_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build and send a request to the POST API of 'Azure Log Analytics' — .post_data","text":"customer_id customer_id 'Azure Log Analytics' workspace shared_key shared_key 'Azure Log Analytics' workspace body Content message logged JSON format log_type Log-Type defined 'Azure Log Analytics' document, custom logging","code":""},{"path":"/reference/dot-post_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build and send a request to the POST API of 'Azure Log Analytics' — .post_data","text":"Returns HTTP response object","code":""},{"path":"/reference/get_log_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get configuration value — get_log_config","title":"Get configuration value — get_log_config","text":"Get configuration value specific key set (set) using set_log_config function. nothing set, reuses default value defined function signature set_log_config function.","code":""},{"path":"/reference/get_log_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get configuration value — get_log_config","text":"","code":"get_log_config(key = NULL)"},{"path":"/reference/get_log_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get configuration value — get_log_config","text":"key Specify key whose value needs extracted. NULL implies specific key, rather extracted .","code":""},{"path":"/reference/get_log_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get configuration value — get_log_config","text":"Returns respective configuration value given key. key NULL, configuration values returned together list.","code":""},{"path":"/reference/get_log_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get configuration value — get_log_config","text":"","code":"# Get configuration value without setting anything   get_log_config(\"log_to_azure\") #> [1] TRUE   # Set some configuration first and then get the respective values   set_log_config(enforce_tz_utc = FALSE, log_to_azure = FALSE)   get_log_config(\"enforce_tz_utc\") #> [1] FALSE   get_log_config(\"log_to_azure\") #> [1] FALSE   # Reset the values   set_log_config()   get_log_config(\"log_to_azure\") #> [1] TRUE    # Extract list of all configurations   get_log_config() #> $log_fields #> [1] \"level\" \"time\"  \"msg\"   #>  #> $additional_fields #> NULL #>  #> $enforce_ascii_msg #> [1] TRUE #>  #> $enforce_tz_utc #> [1] TRUE #>  #> $log_to_azure #> [1] TRUE #>  #> $log_type #> [1] \"log_from_r\" #>  #> $customer_id_env #> [1] \"AZ_LOG_ID\" #>  #> $shared_key_env #> [1] \"AZ_LOG_KEY\" #>"},{"path":"/reference/logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Logging related functions — logger_level","title":"Logging related functions — logger_level","text":"Logger function defined created top log_level layout_json - part another package 'logger'. Additional capabilities added functions enables function able send logs directly 'Azure Log Analytics' workspace, also control post log outputs console - per user input. Note , logging threshold can directly set (needed) using log_threshold function 'logger' package.","code":""},{"path":"/reference/logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging related functions — logger_level","text":"","code":"logger_level(   ...,   log_fields = get_log_config(\"log_fields\"),   additional_fields = get_log_config(\"additional_fields\"),   enforce_ascii_msg = get_log_config(\"enforce_ascii_msg\"),   enforce_tz_utc = get_log_config(\"enforce_tz_utc\"),   log_to_azure = get_log_config(\"log_to_azure\"),   log_type = get_log_config(\"log_type\"),   log_customer_id = Sys.getenv(get_log_config(\"customer_id_env\"), \"abcd\"),   log_shared_key = Sys.getenv(get_log_config(\"shared_key_env\"), \"abcd\") )  logger_info(...)  logger_error(...)  logger_warn(...)  logger_debug(...)  logger_fatal(...)  logger_success(...)  logger_trace(...)"},{"path":"/reference/logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging related functions — logger_level","text":"... Content(s) argument directly passed log_level function 'logger' package. log_fields Character vector field names included JSON. field names automatically collected get_logger_meta_variables function, please refer function's documentation see fields collected. additional_fields named vector type list key-value pairs additional meta data needs added logging context top log_fields. respective value key expected length 1. NULL default. enforce_ascii_msg TRUE (default), logging message guaranteed non-ASCII characters escaped. FALSE, characters logged -. Please note, better ensure ASCII, otherwise might error sending HTTP POST request 'Azure Log Analytics' workspace. enforce_tz_utc TRUE (default), logging time field converted UTC timezone sending logging dump 'Azure Log Analytics' workspace. FALSE, local time captured Sys.time recorded time field. log_to_azure TRUE (default), logs sent 'Azure Log Analytics' workspace console. Else FALSE logs sent 'Azure Log Analytics' workspace, displayed console, default layout 'logger' package. log_type Single element character vector expected. Logs posted event 'Azure Log Analytics'. details, check : https://learn.microsoft.com/en-us/azure/azure-monitor/logs/data-collector-api?tabs=python/ . Default value \"log_from_r\". log_customer_id Workspace ID 'Azure Log Analytics' workspace. default fetches environment variable named AZ_LOG_ID. environment variable set, dummy value \"abcd\" used. environment variable's name can modified set_log_config log_shared_key Shared key 'Azure Log Analytics' workspace. default fetches environment variable named AZ_LOG_KEY. environment variable set, dummy value \"abcd\" used. environment variable's name can modified set_log_config","code":""},{"path":"/reference/logging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logging related functions — logger_level","text":"log_to_azure FALSE log output shown console. Else, TRUE, log output shown console, well posted 'Azure Log Analytics' workspace custom table name specified log_type argument. POST request unsuccessful, additional warning message thrown POST request response. POST request successful, invisibly returns POST object.","code":""},{"path":"/reference/logging.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logging related functions — logger_level","text":"arguments function default value read output get_log_config. idea run set_log_config function define default arguments; use automatically logging anything without need specifying every time triggered. 'Azure Log Analytics' workspace id shared key intentionally fetched environment variables security purpose. good practice specify explicitly. Using environment variable one easy approach potentially hide unintentional user.","code":""},{"path":"/reference/logging.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Logging related functions — logger_level","text":"Logging layout set JSON format, required send 'Azure Log Analytics'. Note layout modifies global namespace 'logger' package default - important use case. logger_info wrapper function around logger_level - logging level set INFO default. logger_error wrapper function around logger_level - logging level set ERROR default. logger_warn wrapper function around logger_level - logging level set WARN default. logger_debug wrapper function around logger_level - logging level set DEBUG default. logger_fatal wrapper function around logger_level - logging level set FATAL default. logger_success wrapper function around logger_level - logging level set SUCCESS default. logger_trace wrapper function around logger_level - logging level set TRACE default.","code":""},{"path":"/reference/logging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logging related functions — logger_level","text":"","code":"# Define logging config and then use logger_* functions to log set_log_config(log_to_azure = FALSE) logger_level(logger::INFO, \"logging message\") # Specify other arguments explicitly inside the logger_level function logger_level(logger::INFO, \"logging message\", log_to_azure = FALSE)  # For ease, use wrapper functions instead of using `logger_level` function as # below logger_info(\"logging message info\", log_to_azure = FALSE)  # Also, instead of writing `log_to_azure = FALSE` every time, set the # configuration in one step using `set_log_config`, and continue to use # wrapper functions as usual. set_log_config(log_to_azure = FALSE) logger_info(\"logging message info\")  # Wrapper function for log level 'error' logger_error(\"logging message error\")  # Wrapper function for log level 'warn' logger_warn(\"logging message warn\")  # Change log threshold to debug logger::log_threshold(logger::DEBUG) # Wrapper function for log level 'debug' logger_debug(\"logging message debug\")  # Wrapper function for log level 'fatal' logger_fatal(\"logging message fatal\")  # Wrapper function for log level 'success' logger_success(\"logging message success\")  # Change logging threshold logger::log_threshold(logger::TRACE) # Wrapper function for log level 'trace' logger_trace(\"logging message trace\")"},{"path":"/reference/set_log_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Set logging configuration — set_log_config","title":"Set logging configuration — set_log_config","text":"Set logging configuration executing function. need set every time logging something via logger_level wrapper , e.g. logger_info function(s).","code":""},{"path":"/reference/set_log_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set logging configuration — set_log_config","text":"","code":"set_log_config(   log_fields = c(\"level\", \"time\", \"msg\"),   additional_fields = NULL,   enforce_ascii_msg = TRUE,   enforce_tz_utc = TRUE,   log_to_azure = TRUE,   log_type = \"log_from_r\",   customer_id_env = \"AZ_LOG_ID\",   shared_key_env = \"AZ_LOG_KEY\" )"},{"path":"/reference/set_log_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set logging configuration — set_log_config","text":"log_fields Character vector field names included JSON. field names automatically collected get_logger_meta_variables function, please refer function's documentation see fields collected. additional_fields named vector type list key-value pairs additional meta data needs added logging context top log_fields. respective value key expected length 1. NULL default. enforce_ascii_msg TRUE (default), logging message guaranteed non-ASCII characters escaped. FALSE, characters logged -. Please note, better ensure ASCII, otherwise might error sending HTTP POST request 'Azure Log Analytics' workspace. enforce_tz_utc TRUE (default), logging time field converted UTC timezone sending logging dump 'Azure Log Analytics' workspace. FALSE, local time captured Sys.time recorded time field. log_to_azure TRUE (default), logs sent 'Azure Log Analytics' workspace console. Else FALSE logs sent 'Azure Log Analytics' workspace, displayed console, default layout 'logger' package. log_type Single element character vector expected. Logs posted event 'Azure Log Analytics'. details, check : https://learn.microsoft.com/en-us/azure/azure-monitor/logs/data-collector-api?tabs=python/ . Default value \"log_from_r\". customer_id_env name environment variable (default AZ_LOG_ID) stores workspace ID 'Azure Log Analytics' workspace. Please refer https://learn.microsoft.com/en-us/azure/azure-monitor/logs/data-collector-api?tabs=powershell#sample-requests/ see may get required workspace ID. shared_key_env name environment variable (default AZ_LOG_KEY) stores shared key 'Azure Log Analytics' workspace. Please refer https://learn.microsoft.com/en-us/azure/azure-monitor/logs/data-collector-api?tabs=powershell#sample-requests/ see may get required shared key.","code":""},{"path":"/reference/set_log_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set logging configuration — set_log_config","text":"saves configuration environment enclosed within package. Returns nothing explicitly.","code":""},{"path":"/reference/set_log_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set logging configuration — set_log_config","text":"","code":"set_log_config(log_fields = c(\"level\", \"time\", \"msg\", \"user\", \"pid\"))   set_log_config(enforce_tz_utc = FALSE, log_to_azure = FALSE)"},{"path":"/news/index.html","id":"azlogr-003","dir":"Changelog","previous_headings":"","what":"azlogr 0.0.3","title":"azlogr 0.0.3","text":"Added ability extract configurations get_log_config function. Minor documentation update.","code":""},{"path":"/news/index.html","id":"azlogr-002","dir":"Changelog","previous_headings":"","what":"azlogr 0.0.2","title":"azlogr 0.0.2","text":"Updated README general package documentation. Added GitHub Actions trigger code linting, testing, building package documentation R CMD check.","code":""},{"path":"/news/index.html","id":"azlogr-001","dir":"Changelog","previous_headings":"","what":"azlogr 0.0.1","title":"azlogr 0.0.1","text":"Added NEWS.md file track changes package. Initial release minimum features required configure logging set one step. , optionally, add additional meta-data collected logging.","code":""}]
